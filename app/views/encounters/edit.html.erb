<div class="yui-gc">

<div class="yui-u first">

<% form_for(@encounter, :html => { :class  => "encounter"} ) do |f| %>
  <%= f.error_messages %>
  <input type="hidden" name="encounter[clerkship_id]" value="<%= @clerkship.id %>" />
  <input type="hidden" name="encounter[encounter_id]" value="<%= @encounter.id %>" />
  
<fieldset class="outline2 bg5" style="background-color: #FFF; border: 0; float: right;">
    	<a class="ui-corner-all bt3 submit_encounter" href="#">Save</a>
		<%= link_to "Cancel and Return", encounter_path(@encounter), :class => "ui-corner-all bt3 cancel_encounter" %>
</fieldset>

<div style="clear:both"></div>

<div class="error" style="display:none;">
 	<%= image_tag("warning.gif") %>
  	<span></span>.<br clear="all"/>
</div>

<fieldset class="outline2 bg5">
  	<p>
    	<%= f.label :encounter_date %><br />
    	<%= f.text_field :encounter_date, :size=>10, :value => @encounter.encounter_date.strftime("%m/%d/%Y"), :class => 'datepicker ui-widget ui-widget-content outline1', :tabindex=>1 %>
  	</p>
	<p>
		<%= f.label :care_setting %><br />
		<%= collection_select(:encounter, :id, @cs, :code, :name, {:prompt => "Select a care setting"}, {"class" => "required"} ) %>
	</p>
  	<p>
    	<%= f.label :Clinic %><br />
		<span id="clinics">
		<%= render :partial => 'clinics', :object => @clinics %>
		</span>
	</p>
</fieldset>

<fieldset class="outline2 bg5">
	<p>
	    <%= f.label :patient_id, "Patient ID" %>
	    <br />
	    <span class="copy">UMHS = CPI #, VA = Last 4 SSN, Other = Initials</span>
	    <br />
    	<%= f.text_field :patient_id, :size=>15, :class=>'ui-widget ui-widget-content outline1 required', :tabindex=>33  %>
	</p>
	<p>
	    <%= f.label(:age, "Age") %><br />
	    <%= f.text_field :age, :size=>10, :class => 'ui-widget ui-widget-content outline1 required', :tabindex=>40  %>
	</p>
	<p>
    	<%= f.label :gender %><br />
   	 	<%= select( "encounter", "gender", { "Male" => "M", "Female" => "F", "Other" => "O" }) %>
	</p> 
	
	<div style="clear:both"></div>
	
	<p>
		<%= f.label :patient_history %><br />
		<input type="hidden" name="hx[P]" value="0">
		<input type="hidden" name="hx[O]" value="0">
	  	<%= check_box_tag 'hx[P]', '1', (@encounter.hx == 'P' || @encounter.hx == 'B') %> Performed
	  	<%= check_box_tag 'hx[O]', '1', (@encounter.hx == 'O' || @encounter.hx == 'B') %> Observed
	</p>
	<p>
		<%= f.label :physical_exam %><br />
		<input type="hidden" name="px[P]" value="0">
		<input type="hidden" name="px[O]" value="0">
	  	<%= check_box_tag 'px[P]', '1', (@encounter.px == 'P' || @encounter.px == 'B') %> Performed
	  	<%= check_box_tag 'px[O]', '1', (@encounter.px == 'O' || @encounter.px == 'B') %> Observed
	</p>
	
	<div style="clear:both"></div>
	
	<p>
    	<%= f.label :primary_problem %>
    	<span>Type in the problem or click the arrow to the right to see all options. If an option does not exist for the problem, please enter your own term.</span>
    	<br />
    	<% @encounterDiagnoses.each do |edx| %> 
			<% if (edx.dx_type == 'P') %>
				<% if (edx.diagnosis.name == 'Other') %> 
					<% $primary_problem = edx.other %>
				<% else %>
					<% $primary_problem = edx.diagnosis.name %>
				<% end %>
			<% end %>
		<% end %>
		<input type="text" tabindex="70" size="50" name="encounter[primary_problem]" id="encounter_primary_problem" class="ui-widget ui-widget-content required outline1" value="<%= $primary_problem %>" />
		<button id="encounter_primary_problem_drop" class="drop_button"></button>
	</p>
	
	<div style="clear:both"></div>
	
	<p>
	   	<%= f.label :secondary_problems %>
	   	<span>Type in the problem(s) or use the arrow to see all options. If an option does not exist for the problem, please enter your own term(s). You can enter more than one problem. Separate each prolbem with a comma.</span>
	   	<br />
	  	<textarea tabindex="100" rows="1" name="encounter[secondary_problems]" id="encounter_secondary_problems" cols="50" class="ui-widget ui-widget-content outline1"><% 
		$sps = ''
	  	@encounterDiagnoses.each do |edx|
			if (edx.dx_type == 'S')
				if (edx.diagnosis.name == 'Other')
					$sps += edx.other
				else
					$sps += edx.diagnosis.name
				end
				$sps += ', '
			end
		end
%><%= $sps %></textarea>
	  	<button id="encounter_secondary_problems_drop" class="drop_button"></button>
	</p>
	
	<div style="clear:both"></div>
	
	<p>
		<%= f.label :procedures_observed, "Procedures Observed/Performed" %>
		<span>Type in the procedure or use the arrow to see all options. If an option does not exist for the procedure, please enter your own term(s). You can enter more than one procedure. Separate each procedure with a comma.</span>
		<br />
		<textarea tabindex="120" rows="1" name="encounter[procedures_observed]" id="encounter_procedures_observed" cols="50" class="ui-widget ui-widget-content outline1"><% 
	$procs = ''
	@encounterProcedures.each do |ep| 
		if (ep.participation_type == 'O')
	  		if (ep.procedure.name == 'Other')
				$procs += ep.other
			else
				$procs += ep.procedure.name
			end
			$procs += ', '
		end
	end
%><%= $procs %></textarea>
		<button id="encounter_procedures_observed_drop" class="drop_button"></button>
	</p>
</fieldset>

<fieldset class="outline2 bg5">
	<p>
		<%= f.label :notes %><br />
	  	<%= f.text_area :notes, :size=>"40x1", :class => "ui-widget ui-widget-content outline1", :tabindex=>130  %>
	</p>
</fieldset>

<fieldset class="outline2 bg5" style="background-color: #FFF; border: 0; float: right;">
    	<a class="ui-corner-all bt3 submit_encounter" href="#">Save</a>
		<%= link_to "Cancel and Return", encounter_path(@encounter), :class => "ui-corner-all bt3 cancel_encounter" %>
</fieldset>

<% end %>



</div> <!-- end yui-u first -->

<div class="yui-u">

	<div id="rightbar" class="ui-widget ">
		
		<%= render "other_resources" %>
		
	</div>
	
</div> <!-- end yui-u -->

</div> <!-- end yui-ge -->

<script type="text/javascript">
$(function() {

	var availableProblems = [<%= @dx_names %>];
	var dx_hash = {<%= @dx_hash %>};
	var availableProcedures = [<%= @proc_names %>];
	var proc_hash = {<%= @proc_hash %>};

	var cltp = {};

	cltp.Resources = (function() {
		var dx_list = [];
		var p_list = [];
		
		function detect_changes(csv, lookup_hash, current_list) {
			var items = $.map(csv.split(","), function(n,i) { return $.trim(n); });
			var ids = $.map(items, function(item,i) { return lookup_hash[item]; });
		
			// detect the new dxid's
			var nids = $.grep(ids, function(n,i) {
				return $.inArray(n, current_list) == -1;
			});
			// console.log("new ids: ", nids);
		
			// detect deletes
			var dids = $.grep(current_list, function(n,i) {
				return $.inArray(n, ids) == -1;
			});
			// console.log("deleted ids: ", dids);
		
			// update dx_list
			current_list = $.grep(current_list, function(n,i) { return $.inArray(n, dids) == -1 } );
			$.merge(current_list, nids);
			
			return { added: nids, removed: dids, updated_list: current_list }		
		}
		
		function get_resources_by_dxs() {
			var pdx = $("#encounter_primary_problem").val();
			var sdx = $("#encounter_secondary_problems").val();
			var dxs = [pdx,sdx].join(","); // combined list
			var chgs = detect_changes(dxs, dx_hash, dx_list);
			dx_list = chgs.updated_list;
			
			// trigger ui updates
			
			// delete resources for deleted dxid's
			$.each(chgs.removed, function(i, dxid) {
				$("#rightbar_resources li[dx_id=" + dxid + "]").remove();
			});
			
			<%url = url_for :controller => "resources", :action => "by_tag" %>
			if (chgs.added.length > 0) {
				$.post('<%= url %>', {"tag": "dx", "tag_ids": chgs.added }, function(data, status) {
					$('#rightbar_resources').append(data);						
				});
			}
		}
		
		function get_resources_by_procs() {
			var procs = $("#encounter_procedures_observed").val();
			var chgs = detect_changes(procs, proc_hash, p_list);
			p_list = chgs.updated_list;
			
			$.each(chgs.removed, function(i, pid) {
				$("#rightbar_resources li[procedures_id=" + pid + "]").remove();
			});
			
			<%url = url_for :controller => "resources", :action => "by_tag" %>
			if (chgs.added.length > 0) {
				$.post('<%= url %>', {"tag": "procedures", "tag_ids": chgs.added }, function(data, status) {
					$('#rightbar_resources').append(data);						
				});
			}
		}
		
		// poll to detect changes and synch up
		window.setInterval(function() { get_resources_by_dxs(); get_resources_by_procs();}, 1500);		
	})();



	jQuery.validator.messages.required = "";
	$("#edit_encounter_<%= @encounter.id %>").validate({
		invalidHandler: function(e, validator) {
					var errors = validator.numberOfInvalids();
					if (errors) {
						var message = errors == 1
							? 'You missed 1 field. It has been highlighted below'
							: 'You missed ' + errors + ' fields.  They have been highlighted below';
						$("div.error span").html(message);
						$("div.error").show();
					} else {
						$("div.error").hide();
					}
				},
				onkeyup: false
	});
	
	$('#encounter_id').change(function() {
		$.ajax({
	  		url: '<%= url_for :controller => "encounters", :action => "get_clerkships_by_care_setting" %>/'+$(this).val(),
			dataType: 'script',
			success: function(data) {
				$('#clinics').html(data);
				$('#encounter_clinic_id').show();
			}	
		});
	});
		
	$(".datepicker").datepicker();	
	
	$("#encounter_secondary_problems").autocomplete({
			minLength: 0,
			source: function(request, response) {
				// delegate back to autocomplete, but extract the last term
				response($.ui.autocomplete.filter(availableProblems, extractLast(request.term)));
			},
			focus: function() {
				// prevent value inserted on focus
				return false;
			},
			select: function(event, ui) {
				var terms = split( this.value );
				terms.pop();
				terms.push( ui.item.value );
				terms.push("");
				this.value = terms.join(", ");
				return false;
			}
		});
				
		$("#encounter_secondary_problems_drop").attr("tabIndex", -1)
				.attr("title", "Show All Items")
				.button({
					icons: {
						primary: "ui-icon-triangle-1-s"
					},
					text: false
				}).removeClass("ui-corner-all")
				.addClass("ui-button-icon")
				.click(function(e) {
					e.preventDefault();
					// close if already visible
					if ($("#encounter_secondary_problems").autocomplete("widget").is(":visible")) {
						$("#encounter_secondary_problems").autocomplete("close");
						return;
					}
					// pass empty string as value to search for, displaying all results
					$("#encounter_secondary_problems").autocomplete("search", "");
					$("#encounter_secondary_problems").focus();
					return false;
				});
	$('textarea#encounter_secondary_problems').autoResize();
		
  	$("#encounter_primary_problem").autocomplete({
			source: availableProblems,
			minLength: 0,
			change: function(event, ui) {
			}
	});

	$("#encounter_primary_problem_drop").attr("tabIndex", -1)
				.attr("title", "Show All Items")
				.button({
					icons: {
						primary: "ui-icon-triangle-1-s"
					},
					text: false
				}).removeClass("ui-corner-all")
				.addClass("ui-button-icon")
				.click(function(e) {
					e.preventDefault();
					if ($("#encounter_primary_problem").autocomplete("widget").is(":visible")) {
						$("#encounter_primary_problem").autocomplete("close");
						return;
					}
					$("#encounter_primary_problem").autocomplete("search", "");
					$("#encounter_primary_problem").focus();
					return false;
				});
		function split(val) {
			return val.split(/,\s*/);
		}
		function extractLast(term) {
			return split(term).pop();
		}		
		
		$("#encounter_procedures_observed").autocomplete({
			minLength: 0,
			source: function(request, response) {
				// delegate back to autocomplete, but extract the last term
				response($.ui.autocomplete.filter(availableProcedures, extractLast(request.term)));
			},
			focus: function() {
				// prevent value inserted on focus
				return false;
			},
			select: function(event, ui) {
				var terms = split( this.value );
				terms.pop();
				terms.push( ui.item.value );
				terms.push("");
				this.value = terms.join(", ");
				return false;
			}
		});
				
		$("#encounter_procedures_observed_drop").attr("tabIndex", -1)
				.attr("title", "Show All Items")
				.button({
					icons: {
						primary: "ui-icon-triangle-1-s"
					},
					text: false
				}).removeClass("ui-corner-all")
				.addClass("ui-button-icon")
				.click(function(e) {
					e.preventDefault();
					// close if already visible
					if ($("#encounter_procedures_observed").autocomplete("widget").is(":visible")) {
						$("#encounter_procedures_observed").autocomplete("close");
						return;
					}
					// pass empty string as value to search for, displaying all results
					$("#encounter_procedures_observed").autocomplete("search", "");
					$("#encounter_procedures_observed").focus();
					return false;
				});
		$('textarea#encounter_procedures_observed').autoResize();
		$('textarea#encounter_notes').autoResize();
		//$('.submit_encounter').button();
		//$('.cancel_encounter').button();
		$('.rightbar_list > li:nth-child(even)').addClass('even');
		$('.submit_encounter').click(function() {
			$('#edit_encounter_<%= @encounter.id %>').submit();
		});
	});
</script>